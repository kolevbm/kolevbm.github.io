"use strict";(self.webpackChunktaking_notes=self.webpackChunktaking_notes||[]).push([[3917],{9485:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>c,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"linux/networking/bridges","title":"Notes on Linux Bridges","description":"Hardware:","source":"@site/docs/linux/networking/bridges.mdx","sourceDirName":"linux/networking","slug":"/linux/networking/bridges","permalink":"/docs/linux/networking/bridges","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"sidebar_label":"Bridges","displayed_sidebar":"linuxSidebar"},"sidebar":"linuxSidebar","previous":{"title":"Basics","permalink":"/docs/linux/networking/basics"},"next":{"title":"Iptables","permalink":"/docs/linux/networking/iptables"}}');var r=i(4848),t=i(8453);const c={sidebar_label:"Bridges",displayed_sidebar:"linuxSidebar"},o="Notes on Linux Bridges",d={},h=[{value:"Hardware:",id:"hardware",level:2},{value:"Notes",id:"notes",level:2},{value:"Tasks",id:"tasks",level:2},{value:"0. Prepare devices",id:"0-prepare-devices",level:3},{value:"DeviceA, Windows Machine",id:"devicea-windows-machine",level:4},{value:"DeviceB, Luckfox",id:"deviceb-luckfox",level:4},{value:"1. Create bridge on the host device between <code>eth1</code> and <code>eth2</code> call it <code>br0</code>",id:"1-create-bridge-on-the-host-device-between-eth1-and-eth2-call-it-br0",level:3},{value:"2. Connect deviceA to <code>eth1</code> and deviceB to <code>eht2</code> set static IPs in network 172.16.1.0/24",id:"2-connect-devicea-to-eth1-and-deviceb-to-eht2-set-static-ips-in-network-172161024",level:3},{value:"Checks",id:"checks",level:4},{value:"3. Set an ip address of the bridge br0 so we can have access to both devices from the host",id:"3-set-an-ip-address-of-the-bridge-br0-so-we-can-have-access-to-both-devices-from-the-host",level:3},{value:"Checks",id:"checks-1",level:4}];function a(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"notes-on-linux-bridges",children:"Notes on Linux Bridges"})}),"\n",(0,r.jsx)(n.h2,{id:"hardware",children:"Hardware:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"RADXA E54C network computer"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Operating System: Debian GNU/Linux 12 (bookworm)\r\nKernel: Linux 6.1.84-6-rk2410\r\nArchitecture: arm64\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Luckfox Pico pro/Max"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'NAME=Buildroot\r\nVERSION=-g9bf51ae87\r\nID=buildroot\r\nVERSION_ID=2023.02.6\r\nPRETTY_NAME="Buildroot 2023.02.6"\r\narmv7l\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Windows PC"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Bridges are like switches, they operate at Layer 2 of the OSI model, they use MAC addresses."}),"\n",(0,r.jsx)(n.li,{children:"Routers operate at layer 3 IP addresses"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["That means devices connected to a bridge for example ",(0,r.jsx)(n.code,{children:"eth1"})," deviceA and ",(0,r.jsx)(n.code,{children:"eth2"})," deviceB will be able to communicate, ",(0,r.jsx)(n.strong,{children:"if they are on the same network"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"deviceA Windows Machine\r\nip: 172.16.1.10/24\r\n\r\ndeviceB Luckfox Pico Pro/Max\r\nip: 172.16.1.20/24\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"Clarification on CIDR notation",type:"note",children:(0,r.jsxs)(n.p,{children:["10.10.10.0/24 is the network",(0,r.jsx)(n.br,{}),"\n","10.10.10.1/24 is the address"]})}),"\n",(0,r.jsx)(n.h2,{id:"tasks",children:"Tasks"}),"\n",(0,r.jsxs)(n.ol,{start:"0",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#0-prepare-devices",children:"Prepare devices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"DeviceA, Windows Machine"}),"\n",(0,r.jsx)(n.li,{children:"DeviceB, Luckfox"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.a,{href:"#1-create-bridge-on-the-host-device-between-eth1-and-eth2-call-it-br0",children:["Create bridge on the host device between ",(0,r.jsx)(n.code,{children:"eth1"})," and ",(0,r.jsx)(n.code,{children:"eth2"})," (br0)"]})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.a,{href:"#2-connect-devicea-to-eth1-and-deviceb-to-eht2-set-static-ips-in-network-172161024",children:["Connect deviceA to ",(0,r.jsx)(n.code,{children:"eth1"})," and deviceB to ",(0,r.jsx)(n.code,{children:"eth2"}),", set static IPs"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Checks"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.a,{href:"#3-set-an-ip-address-of-the-bridge-br0-so-we-can-have-access-to-both-devices-from-the-host",children:["Set an IP address for the bridge ",(0,r.jsx)(n.code,{children:"br0"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Checks"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"0-prepare-devices",children:"0. Prepare devices"}),"\n",(0,r.jsx)(n.h4,{id:"devicea-windows-machine",children:"DeviceA, Windows Machine"}),"\n",(0,r.jsx)(n.h4,{id:"deviceb-luckfox",children:"DeviceB, Luckfox"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://wiki.luckfox.com/Luckfox-Pico/Luckfox-Pico-RV1106/Luckfox-Pico-Pro-Max/Luckfox-Pico-Flash-burn-image",children:"Install the buildroot OS on the spi flash"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://wiki.luckfox.com/Luckfox-Pico/Luckfox-Pico-RV1106/Luckfox-Pico-Pro-Max/SSH-Telnet-Login",children:"Connect to it via the USB interface"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["When connecting Luckfox to the usb a virtual network port on the windows machine will be created",(0,r.jsx)(n.br,{}),"\n","USB virtual dongles have a ",(0,r.jsx)(n.strong,{children:"static"})," IP address of ",(0,r.jsx)(n.strong,{children:"172.32.0.93"})," Before using it, you need to set up the RNDIS virtual network port.",(0,r.jsx)(n.br,{}),"\n","Look for a Network Adapter with something like ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"Remote NDIS based internet Sharing Device"})})," in the Network Connections.",(0,r.jsx)(n.br,{}),"\n","Change the address of the windows Network Adapter to: ",(0,r.jsx)(n.br,{}),"\n","IP address: 172.32.0.100 ",(0,r.jsx)(n.br,{}),"\n","subnet mask: 255.255.0.0"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create a script in ",(0,r.jsx)(n.code,{children:"/etc/init.d"})," check ",(0,r.jsx)(n.a,{href:"https://wiki.luckfox.com/Luckfox-Pico/Luckfox-Pico-RV1103/Luckfox-Pico-Plus-Mini/Luckfox-Pico-Autostart",children:"this"})," out ",(0,r.jsx)(n.br,{}),"\n","Why? ",(0,r.jsx)(n.br,{}),"\n","Buildroot with BusyBox init follows SysV-style init scripts for boot-time actions, hence changing /etc/network/interfaces won't work. ",(0,r.jsx)(n.br,{}),"\n","It runs at boot because BusyBox init uses ",(0,r.jsx)(n.code,{children:"/etc/inittab"})," \u2192 runs ",(0,r.jsx)(n.code,{children:"/etc/init.d/rcS"})," \u2192 runs all S* scripts."]}),"\n",(0,r.jsxs)(n.p,{children:["3.1. Luckfox buildroot image is using ",(0,r.jsx)(n.a,{href:"https://www.busybox.net/downloads/BusyBox.html",children:"BusyBox"})," - The Swiss Army Knife of Embedded Linux\\"]}),"\n",(0,r.jsx)(n.p,{children:"Create a startup script to wait 50 sec for dhcp server else set a static ip address"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"adjust the priority of system scripts"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'title="/etc/init.d"',children:"mv S99usb0config S90usb0config\r\nmv S99_auto_reboot S90_auto_reboot\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["create a script ",(0,r.jsx)(n.code,{children:"vi etc/init.d/S99_static_ip"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:'title="/etc/init.d/S99_static_ip"',children:'#!/bin/sh\r\n\r\necho "### Static IP script ###"\r\n\r\nMAX_RETRIES=10\r\nTRIES=0\r\nUSER_IP=172.16.1.20/24\r\n\r\ncheck_ip_address(){\r\nif ip a show eth0 | grep -q "inet" ; then\r\n          echo "inet found"\r\n          return 0\r\n     else\r\n          echo "inet not found"\r\n     return 1\r\nfi\r\n}\r\n\r\n# check if we have ip by DHCP\r\n\r\nwait_dhcp() {\r\nwhile [ $TRIES -lt $MAX_RETRIES ]; do\r\n     if check_ip_address ; then\r\n          echo "DHCP succeed!"\r\n          exit 0\r\n     else\r\n          echo "$((TRIES + 1))/$MAX_RETRIES wait for DHCP IP..."\r\n          TRIES=$((TRIES + 1))\r\n     sleep 5\r\n     fi\r\ndone\r\n}\r\n\r\n# set static IP\r\n\r\nset_static_ip() {\r\necho "giving static IP $USER_IP"\r\nip addr add $USER_IP dev eth0\r\nip a show dev eth0\r\n}\r\n\r\ncase $1 in\r\ncheck)\r\n     check_ip_address\r\n     ;;\r\nstart)\r\n     echo "start"\r\n     wait_dhcp\r\n     set_static_ip\r\n     ;;\r\nstop)\r\n     echo "stop"\r\n     ;;\r\n\\*)\r\n     exit 1\r\n     ;;\r\nesac\r\n\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"make the script executable"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"chmod +x /etc/init.d/S99_static_ip\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"1-create-bridge-on-the-host-device-between-eth1-and-eth2-call-it-br0",children:["1. Create bridge on the host device between ",(0,r.jsx)(n.code,{children:"eth1"})," and ",(0,r.jsx)(n.code,{children:"eth2"})," call it ",(0,r.jsx)(n.code,{children:"br0"})]}),"\n",(0,r.jsxs)(n.h3,{id:"2-connect-devicea-to-eth1-and-deviceb-to-eht2-set-static-ips-in-network-172161024",children:["2. Connect deviceA to ",(0,r.jsx)(n.code,{children:"eth1"})," and deviceB to ",(0,r.jsx)(n.code,{children:"eht2"})," set static IPs in network 172.16.1.0/24"]}),"\n",(0,r.jsx)(n.h4,{id:"checks",children:"Checks"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Check connectivity from deviceA to deviceB and vice versa"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-set-an-ip-address-of-the-bridge-br0-so-we-can-have-access-to-both-devices-from-the-host",children:"3. Set an ip address of the bridge br0 so we can have access to both devices from the host"}),"\n",(0,r.jsx)(n.h4,{id:"checks-1",children:"Checks"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Check connection to Windows PC from bridge host (radxa) and vice versa"}),"\n",(0,r.jsx)(n.li,{children:"Check connection to luckfox pico from bridge host (radxa) and vice versa"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{})})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>o});var s=i(6540);const r={},t=s.createContext(r);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);