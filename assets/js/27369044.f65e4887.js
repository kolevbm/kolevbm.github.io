"use strict";(self.webpackChunktaking_notes=self.webpackChunktaking_notes||[]).push([[8502],{6783:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>o});var i=r(4848),s=r(8453);const t={sidebar_label:"Alpine linux",displayed_sidebar:"linuxSidebar"},a="Alpine linux",l={id:"linux/Alpine",title:"Alpine linux",description:"running a service",source:"@site/docs/linux/Alpine.mdx",sourceDirName:"linux",slug:"/linux/Alpine",permalink:"/docs/linux/Alpine",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Alpine linux",displayed_sidebar:"linuxSidebar"},sidebar:"linuxSidebar",previous:{title:"SSH keys",permalink:"/docs/linux/ssh"},next:{title:"TODO",permalink:"/docs/linux/todo"}},c={},o=[{value:"running a service",id:"running-a-service",level:2},{value:"1.Create the service script:",id:"1create-the-service-script",level:3},{value:"2.Edit the service script",id:"2edit-the-service-script",level:3},{value:"3. Make sure it is executable",id:"3-make-sure-it-is-executable",level:3},{value:"4. Add the service to the default runlevel:",id:"4-add-the-service-to-the-default-runlevel",level:3},{value:"5. Start the service manually:",id:"5-start-the-service-manually",level:3},{value:"6. Check the status of the service:",id:"6-check-the-status-of-the-service",level:3},{value:"7. Stop the service:",id:"7-stop-the-service",level:3},{value:"8. Using environment variables in service scripts",id:"8-using-environment-variables-in-service-scripts",level:3},{value:"Adding environment variables",id:"adding-environment-variables",level:2},{value:"1. Temporarily Setting Environment Variables",id:"1-temporarily-setting-environment-variables",level:3},{value:"2. Permanently Adding Environment Variables",id:"2-permanently-adding-environment-variables",level:3},{value:"a. User-Specific (Bash Shell)",id:"a-user-specific-bash-shell",level:4},{value:"b. System-Wide Environment Variables",id:"b-system-wide-environment-variables",level:4},{value:"Alternatively, you can create a file under <code>/etc/profile.d/</code>, such as:",id:"alternatively-you-can-create-a-file-under-etcprofiled-such-as",level:5}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"alpine-linux",children:"Alpine linux"})}),"\n",(0,i.jsx)(n.h2,{id:"running-a-service",children:"running a service"}),"\n",(0,i.jsx)(n.h3,{id:"1create-the-service-script",children:"1.Create the service script:"}),"\n",(0,i.jsx)(n.p,{children:"OpenRC service scripts are located in /etc/init.d/. Each service needs its own script.\r\nCreate a new script for your service and make it executable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="create service script"',children:"sudo touch /etc/init.d/myservice\r\nsudo chmod +x /etc/init.d/myservice\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2edit-the-service-script",children:"2.Edit the service script"}),"\n",(0,i.jsx)(n.p,{children:"Edit the service script with your service's details:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="edit service script"',children:"sudo nano /etc/init.d/myservice\n"})}),"\n",(0,i.jsx)(n.p,{children:"Basic service script template:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="service script"',children:'#!/sbin/openrc-run\r\n\r\nname="remioWeb"\r\ndescription="Remio docs Web server"\r\n\r\ndirectory="/home/boris/remioWebDocs/remioWebDocs"\r\n\r\npidfile="/run/${RC_SVCNAME}.pid"\r\ncommand="/usr/bin/node"  # Path to your daemon or service executable\r\ncommand_args="/home/boris/remioWebDocs/remioWebDocs/node_modules/.bin/docusaurus serve --port 80 --host 0.0.0.0" # Arguments to pass to the command\r\n\r\n\r\n\r\ncommand_background="yes"\r\n\r\noutput_log="/var/log/remioWeb.log"\r\nerror_log="/var/log/remioWeb_error.log"\r\n\r\ndepend() {\r\n\r\n want net\r\n}\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["in this example we are using ",(0,i.jsx)(n.code,{children:"nodejs"})," and ",(0,i.jsx)(n.code,{children:"docusaurus"})," to serve the docs its like running: ",(0,i.jsx)(n.code,{children:"node /home/boris/remioWebDocs/remioWebDocs/node_modules/.bin/docusaurus serve --port 80 --host 0.0.0.0"})]}),(0,i.jsxs)(n.p,{children:["in general you will run: ",(0,i.jsx)(n.code,{children:"npm run serve -- --build --port 80 --host 0.0.0.0"})," if you are in the root of the project, but ",(0,i.jsx)(n.code,{children:"node"})," will be a child process of ",(0,i.jsx)(n.code,{children:"npm"})," and the ",(0,i.jsx)(n.code,{children:"openrc"})," will not be able to kill the process"]})]}),"\n",(0,i.jsx)(n.h3,{id:"3-make-sure-it-is-executable",children:"3. Make sure it is executable"}),"\n",(0,i.jsx)(n.p,{children:"After editing, ensure the script is executable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="make executable"',children:"\r\nsudo chmod +x /etc/init.d/myservice\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-add-the-service-to-the-default-runlevel",children:"4. Add the service to the default runlevel:"}),"\n",(0,i.jsx)(n.p,{children:"To ensure the service starts automatically on boot, add it to the default runlevel:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="add to default runlevel"',children:"sudo rc-update add myservice default\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-start-the-service-manually",children:"5. Start the service manually:"}),"\n",(0,i.jsx)(n.p,{children:"You can start the service manually to test it:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="start service"',children:"sudo rc-service myservice start\n"})}),"\n",(0,i.jsx)(n.h3,{id:"6-check-the-status-of-the-service",children:"6. Check the status of the service:"}),"\n",(0,i.jsx)(n.p,{children:"To check if the service is running, use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="check status"',children:"sudo rc-service myservice status\n"})}),"\n",(0,i.jsx)(n.h3,{id:"7-stop-the-service",children:"7. Stop the service:"}),"\n",(0,i.jsx)(n.p,{children:"To stop the service, use:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="stop service"',children:"sudo rc-service myservice stop\n"})}),"\n",(0,i.jsx)(n.h3,{id:"8-using-environment-variables-in-service-scripts",children:"8. Using environment variables in service scripts"}),"\n",(0,i.jsx)(n.p,{children:"Edit the script to include the necessary OpenRC headers and commands to start your service. Include the sourcing of environment variables:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="service script"',children:'\r\n#!/sbin/openrc-run\r\n\r\nname="My Service"\r\ndescription="This is my custom service"\r\ncommand="/path/to/your/executable"\r\ncommand_args=""\r\npidfile="/var/run/myservice.pid"\r\noutput_log="/var/log/myservice.log"\r\nerror_log="/var/log/myservice.err"\r\n\r\ndepend() {\r\n    need net\r\n}\r\n\r\nstart_pre() {\r\n    source /etc/myservice.env\r\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"start_pre"})," function sources the environment variables from the specified file before starting the service. Otherwise the service will not have access to the environment variables."]})}),"\n",(0,i.jsxs)(n.p,{children:["Create a file to store your environment variables, for example, ",(0,i.jsx)(n.code,{children:"/etc/myservice.env"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="create env file"',children:'MY_VAR1="value1"\r\nMY_VAR2="value2"\r\nexport MY_VAR1 MY_VAR2\n'})}),"\n",(0,i.jsx)(n.h2,{id:"adding-environment-variables",children:"Adding environment variables"}),"\n",(0,i.jsx)(n.p,{children:"To add environment variables in Alpine Linux, you can set them temporarily for the current session or configure them permanently. Here are the steps for both methods:"}),"\n",(0,i.jsx)(n.h3,{id:"1-temporarily-setting-environment-variables",children:"1. Temporarily Setting Environment Variables"}),"\n",(0,i.jsx)(n.p,{children:"This method is useful for one-time settings that only need to exist for the duration of your session."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'export MY_VAR="value"\n'})}),"\n",(0,i.jsx)(n.p,{children:"To verify the variable:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"echo $MY_VAR\n"})}),"\n",(0,i.jsx)(n.p,{children:"To get all environment variables:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"printenv\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"This will remain valid only for the duration of the current shell session."})}),"\n",(0,i.jsx)(n.h3,{id:"2-permanently-adding-environment-variables",children:"2. Permanently Adding Environment Variables"}),"\n",(0,i.jsx)(n.p,{children:"To make environment variables persistent across reboots or sessions, you can configure them in various ways depending on whether you want them for a specific user or system-wide."}),"\n",(0,i.jsx)(n.h4,{id:"a-user-specific-bash-shell",children:"a. User-Specific (Bash Shell)"}),"\n",(0,i.jsx)(n.h4,{id:"b-system-wide-environment-variables",children:"b. System-Wide Environment Variables"}),"\n",(0,i.jsx)(n.p,{children:"For system-wide environment variables (available for all users), you can add them to /etc/profile or create a new file in /etc/profile.d/."}),"\n",(0,i.jsxs)(n.p,{children:["Open ",(0,i.jsx)(n.code,{children:"/etc/profile"})," (or create a script in ",(0,i.jsx)(n.code,{children:"/etc/profile.d/"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/profile\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Add your environment variables ",(0,i.jsx)(n.strong,{children:"at the bottom:"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'export MY_VAR="value"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Save and exit the file."}),"\n",(0,i.jsxs)(n.p,{children:["To apply the changes ",(0,i.jsx)(n.strong,{children:"without rebooting"}),", run:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"source /etc/profile\n"})}),"\n",(0,i.jsxs)(n.h5,{id:"alternatively-you-can-create-a-file-under-etcprofiled-such-as",children:["Alternatively, you can create a file under ",(0,i.jsx)(n.code,{children:"/etc/profile.d/"}),", such as:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo nano /etc/profile.d/myenvvars.sh\n"})}),"\n",(0,i.jsx)(n.p,{children:"Inside this file, add:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'export MY_VAR="value"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Then save and exit the file. And run ",(0,i.jsx)(n.code,{children:"source /etc/profile"})," to apply the changes."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["I prefer the ",(0,i.jsx)(n.code,{children:"/etc/profile.d/"})," method because it keeps the ",(0,i.jsx)(n.code,{children:"/etc/profile"})," file clean and organized.\r\nAnd all custom variables are stored in separate files."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(6540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);