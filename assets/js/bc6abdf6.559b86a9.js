"use strict";(self.webpackChunktaking_notes=self.webpackChunktaking_notes||[]).push([[8907],{7642:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var t=n(4848),o=n(8453);const s={slug:"regex",title:"regex",authors:["boris"],tags:["regex","node","js"]},i=void 0,a={permalink:"/blog/regex",source:"@site/blog/2024-09-24-basic-nodejs-regex-formatter/index.mdx",title:"regex",description:"Open a file, perform regex and generate output file",date:"2024-09-24T00:00:00.000Z",tags:[{inline:!1,label:"regex",permalink:"/blog/tags/regex",description:"regex tag description"},{inline:!1,label:"node",permalink:"/blog/tags/node"},{inline:!1,label:"javascript",permalink:"/blog/tags/js"}],readingTime:1.69,hasTruncateMarker:!0,authors:[{name:"Boris Kolev",title:"owner",key:"boris",page:null}],frontMatter:{slug:"regex",title:"regex",authors:["boris"],tags:["regex","node","js"]},unlisted:!1,nextItem:{title:"Greetings!",permalink:"/blog/greetings"}},l={authorsImageUrls:[void 0]},c=[];function u(e){const r={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.p,{children:"Open a file, perform regex and generate output file"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'const fs = require("fs");\r\n\r\n// Function to process the file\r\nfunction processFile(inputFile, outputFile) {\r\n  // Read the input file as a string\r\n  fs.readFile(inputFile, "utf8", (err, data) => {\r\n    if (err) {\r\n      console.error("Error reading the input file:", err);\r\n      return;\r\n    }\r\n\r\n    // Find the pattern "01 03 " and ensure a newline before each occurrence\r\n    const pattern = "01 03 ";\r\n    const pattern2 = /\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3} B/g;\r\n    const modifiedData = data\r\n      .replace(pattern2, "")\r\n      .replace(new RegExp(`(${pattern})`, "g"), "\\n\\r$1")\r\n      .replace(/\\s\\n\\s{2}/g, "");\r\n\r\n    // Write the modified content to output.txt\r\n    file: fs.writeFile(outputFile, modifiedData, "utf8", (err) => {\r\n      if (err) {\r\n        console.error("Error writing the output file:", err);\r\n        return;\r\n      }\r\n      console.log(`File processed successfully. Check the output at ${outputFile}`);\r\n    });\r\n  });\r\n}\r\n\r\n// Specify input and output file paths\r\nconst inputFile = "beckhoff.log";\r\nconst outputFile = "output.txt";\r\n\r\n// Process the file\r\nprocessFile(inputFile, outputFile);\r\n\r\n// The expression \\n\\r$1 is commonly used in the context of a replace operation with regular expressions. Here\'s what it means:\r\n\r\n// \\n\\r: This represents a combination of newline (\\n) and carriage return (\\r), which is often used to create a new line or start a new paragraph in some operating systems (like Windows).\r\n\r\n// \\n: Newline character (moves the cursor to the next line).\r\n// \\r: Carriage return (moves the cursor to the beginning of the line).\r\n// $1: In regular expressions, $1 refers to the first captured group from a matching pattern.\r\n\r\n// When you use parentheses () in a regular expression, whatever is matched inside those parentheses is stored as a "capture group."\r\n// $1 is a placeholder for the content of the first capturing group, i.e., whatever was matched by the first set of parentheses in the regex.\r\n\r\n// const regex = /(\\d+)/g;\r\n// const str = "12345";\r\n// const result = str.replace(regex, \'\\n\\r$1\');\r\n// console.log(result);\r\n\r\n// Explanation:\r\n\r\n// Pattern (\\d+): Captures one or more digits (e.g., 12345).\r\n// Replacement \\n\\r$1: Adds a newline and carriage return before the matched digits (which is captured as $1).\n'})})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var t=n(6540);const o={},s=t.createContext(o);function i(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);