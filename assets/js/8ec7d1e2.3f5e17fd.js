"use strict";(self.webpackChunktaking_notes=self.webpackChunktaking_notes||[]).push([[3340],{8206:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"linux/processes","title":"Processes","description":"What is a Process?","source":"@site/docs/linux/processes.mdx","sourceDirName":"linux","slug":"/linux/processes","permalink":"/docs/linux/processes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Processes","sidebar_position":2,"displayed_sidebar":"linuxSidebar"},"sidebar":"linuxSidebar","previous":{"title":"Filesystem Hierarchy","permalink":"/docs/linux/folder_structure"},"next":{"title":"Basic commands","permalink":"/docs/linux/terminal_basics"}}');var r=n(4848),t=n(8453);const o={sidebar_label:"Processes",sidebar_position:2,displayed_sidebar:"linuxSidebar"},c="Processes",l={},a=[{value:"What is a Process?",id:"what-is-a-process",level:2},{value:"Process IDs (PIDs)",id:"process-ids-pids",level:2},{value:"Daemon Processes",id:"daemon-processes",level:2},{value:"Managing Daemons",id:"managing-daemons",level:2},{value:"Foreground and Background Processes",id:"foreground-and-background-processes",level:2},{value:"Killing Processes",id:"killing-processes",level:2},{value:"Signals",id:"signals",level:2}];function d(e){const s={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"processes",children:"Processes"})}),"\n",(0,r.jsx)(s.h2,{id:"what-is-a-process",children:"What is a Process?"}),"\n",(0,r.jsx)(s.p,{children:"A process in Linux (and other Unix-like operating systems) is an instance of a running program. Each process is assigned resources such as CPU time, memory, and I/O operations, and it executes in the system until it's terminated."}),"\n",(0,r.jsx)(s.p,{children:"A process is made up of:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Program code"}),": The actual instructions for what the process should do."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Data"}),": The variables and other data the process needs."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Process state"}),": Information like the process\u2019s priority, open file descriptors, environment variables, and scheduling status."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Process States"})}),"\n",(0,r.jsx)(s.p,{children:"A process can be in several states:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Running (R)"})," : The process is either running or ready to run."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Sleeping (S)"}),": The process is waiting for an event to complete (e.g., waiting for I/O).","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Interruptible Sleep: The process can be woken up by signals."}),"\n",(0,r.jsx)(s.li,{children:"Uninterruptible Sleep (D): The process is waiting on hardware to complete an operation, and cannot be interrupted until the operation finishes."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Stopped (T)"}),": The process has been stopped by a signal or the user (e.g., with the kill command or by using Ctrl + Z)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Zombie (Z)"}),": The process has finished execution, but its parent process hasn't yet read its exit status. Zombies are removed once the parent process acknowledges their termination."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"process-ids-pids",children:"Process IDs (PIDs)"}),"\n",(0,r.jsx)(s.p,{children:"Every process is identified by a unique PID (Process ID), which is an integer assigned by the kernel when the process is created. The kernel uses PIDs to manage and track processes."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"PID 1"}),": The very first process started by the kernel after booting is called ",(0,r.jsx)(s.em,{children:"init"})," or its modern replacement, ",(0,r.jsx)(s.em,{children:"systemd"}),". It has a ",(0,r.jsx)(s.strong,{children:"PID"})," of 1 and is the ancestor of all other processes on the system."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"PPID (Parent Process ID)"}),": Every process has a parent, which is the process that started it. The ",(0,r.jsx)(s.strong,{children:"PPID"})," is the ",(0,r.jsx)(s.strong,{children:"PID"})," of the parent process."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"daemon-processes",children:"Daemon Processes"}),"\n",(0,r.jsxs)(s.p,{children:["A ",(0,r.jsx)(s.strong,{children:"daemon"})," is a special type of process that runs in the background, often providing system or application services. These are long-running processes typically started at boot time and don't require user interaction."]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Characteristics of Daemons:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"They usually run in the background."}),"\n",(0,r.jsx)(s.li,{children:"They often start at boot and continue running until the system shuts down."}),"\n",(0,r.jsx)(s.li,{children:"Daemons typically perform tasks like handling network connections, monitoring hardware, managing services, etc."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:["Naming Convention: By convention, daemon processes have names ",(0,r.jsx)(s.strong,{children:"ending with the letter d"})," (e.g., ",(0,r.jsx)(s.code,{children:"sshd"})," for the SSH daemon, ",(0,r.jsx)(s.code,{children:"httpd"})," for the Apache web server daemon)."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:"Common Daemons:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"sshd"}),": Manages SSH connections to the server."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"httpd"}),": Manages Apache HTTP web server processes."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"crond"}),": Manages scheduled jobs (like backups, system tasks)."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"systemd"}),": The system and service manager for Linux."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"managing-daemons",children:"Managing Daemons"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",metastring:'title="bash"',children:"# Start a service\nsudo systemctl start sshd\n\n# Stop a service\nsudo systemctl stop sshd\n\n# Restart a service\nsudo systemctl restart httpd\n\n# Check the status of a service\nsudo systemctl status crond\n\n"})}),"\n",(0,r.jsx)(s.h2,{id:"foreground-and-background-processes",children:"Foreground and Background Processes"}),"\n",(0,r.jsx)(s.p,{children:"In Linux, processes can run in the foreground (interacting with the terminal) or in the background (detached from the terminal)."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Foreground process"}),": A process that takes over the terminal and runs interactively.\nWhen you start a process from the command line (like running ",(0,r.jsx)(s.code,{children:"nano"}),"),\nit's typically in the foreground."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Background process"}),": A process that runs in the background, freeing up the\nterminal for other tasks. You can run a command in the background by appending an\n",(0,r.jsx)(s.code,{children:"&"})," to the command:"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",metastring:'title="bash"',children:"my_command &\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["To see all background processes, use ",(0,r.jsx)(s.code,{children:"jobs"}),"."]}),"\n",(0,r.jsxs)(s.li,{children:["To bring a background process to the foreground, use ",(0,r.jsx)(s.code,{children:"fg"}),".","\n",(0,r.jsx)(s.admonition,{type:"info",children:(0,r.jsxs)(s.p,{children:["when in SSH session, closing the terminal will likely kill the session and\nstop the process checkout this to\n",(0,r.jsx)(s.a,{href:"terminal_basics#continue-running-a-command-after-closing-ssh-connection",children:"continue running a process when SSH is closed"})]})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"killing-processes",children:"Killing Processes"}),"\n",(0,r.jsx)(s.p,{children:"Sometimes, a process becomes unresponsive or needs to be stopped. Linux provides several commands to kill (terminate) processes."}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"kill"}),": Sends a signal to a process, which can instruct it to terminate or handle the signal in a different way."]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",metastring:'title="bash"',children:"kill <PID>  # Sends the default TERM signal to gracefully stop the process\n"})}),"\n",(0,r.jsx)(s.p,{children:"You can specify different signals:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"SIGTERM (15)"}),": Asks the process to terminate gracefully."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"SIGKILL (9)"}),": Forces the process to terminate immediately."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"SIGHUP (1)"}),": Reloads the process (often used to restart daemons without stopping them)."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Example:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",metastring:'title="bash"',children:"kill -9 1234 # Forcefully kill the process with PID 1234\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"pkill"}),": Kills processes based on name instead of PID:"]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",metastring:'title="bash"',children:'pkill apache2 # Kills all processes with the name "apache2"\n'})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"killall"}),": Kills all processes with a specific name (similar to pkill but with more options)."]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",metastring:'title="bash"',children:'killall nginx # Kills all processes with the name "nginx"\n'})}),"\n",(0,r.jsx)(s.h2,{id:"signals",children:"Signals"}),"\n",(0,r.jsx)(s.p,{children:"Linux processes communicate with the kernel and each other using signals. These are software interrupts used to notify processes of events such as a request to terminate or a request to stop temporarily."}),"\n",(0,r.jsx)(s.p,{children:"Some common signals include:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"SIGTERM (15)"}),": Requests a process to terminate gracefully."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"SIGKILL (9)"}),": Immediately kills a process. This signal cannot be ignored."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"SIGINT (2)"}),": Sent when the user presses Ctrl + C in the terminal to interrupt a running process."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"SIGHUP (1)"}),": Sent to a process when its controlling terminal is closed. It\u2019s also used to restart daemons."]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"You can send signals to processes using the kill command or by pressing certain key combinations:"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"Ctrl + C"}),": Sends SIGINT to the foreground process, stopping it."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"Ctrl + Z"}),": Suspends the process by sending a ",(0,r.jsx)(s.code,{children:"SIGTSTP"})," signal. You can resume it in the background with ",(0,r.jsx)(s.code,{children:"bg"})," or in the foreground with ",(0,r.jsx)(s.code,{children:"fg"})]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>c});var i=n(6540);const r={},t=i.createContext(r);function o(e){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);